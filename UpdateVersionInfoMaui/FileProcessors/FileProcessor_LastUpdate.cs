using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using ZPF;

namespace UpdateVersionInfo;

public class FileProcessor_LastUpdate : IFileProcessor
{
   public string Name { get; set; } = "CLog";

   public bool Check(string filePath)
   {
      bool IsOk = true;

      IsOk = IsOk && (filePath.ToLower().EndsWith(@"\lastupdate.json")
         || filePath.ToLower().EndsWith(@"/lastupdate.json"));

      return IsOk;
   }

   public Version GetVersion(string filePath)
   {
      string st = System.IO.File.ReadAllText(filePath);

      // Deserialize the JSON string to a ReleaseDetails object
      var rd = JsonSerializer.Deserialize<ReleaseDetails>(st);

      if (rd == null)
      {
         // LastError = "Invalid release details format.";
         return new Version();
      }
      else
      {
         return new Version(rd.Version);
      }

      return new Version();
   }

   public string Update(string filePath, Version newVersion)
   {
      string st = System.IO.File.ReadAllText(filePath);

      // Deserialize the JSON string to a ReleaseDetails object
      var rd = JsonSerializer.Deserialize<ReleaseDetails>(st);

      if (rd == null)
      {
         rd = new ReleaseDetails
         {
         };

         // LastError = "Invalid release details format.";
         rd.Version = newVersion.ToString();
         rd.ShortVersion = newVersion.ToString();
         rd.ReleaseNotes = "LastUpdate file generated by UpdateVersion ...";

         var option = new JsonSerializerOptions
         {
            WriteIndented = true,
         };

         st = JsonSerializer.Serialize(rd, option);

         File.WriteAllText(filePath, st);
      }
      else
      {
         //file = file.Replace("#UpdateVersion#", MainViewModel.Current.UpdateVersionInfoVersion);
         //file = file.Replace("#Version#", newVersion.ToString());
         //file = file.Replace("#BuildDate#", MainViewModel.Current.BuildTimeStamp.ToString("dd.MM.yyyy"));
         //file = file.Replace("#BuildTime#", MainViewModel.Current.BuildTimeStamp.ToString("HH:mm"));

         if( rd.Version == rd.ShortVersion )
         {
            rd.Version = newVersion.ToString();
            rd.ShortVersion = newVersion.ToString();
         }
         else
         {
            rd.Version = newVersion.ToString();
         }

         var option = new JsonSerializerOptions
         {
            WriteIndented = true,
         };

         st = JsonSerializer.Serialize(rd, option );

         File.WriteAllText(filePath, st);
      }

      return "ok";
   }
}

