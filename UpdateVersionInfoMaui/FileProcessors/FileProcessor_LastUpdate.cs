using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using ZPF;

namespace UpdateVersionInfo;

public class FileProcessor_LastUpdate : IFileProcessor
{
   public string Name { get; set; } = "LUpd ";

   public bool Check(string filePath)
   {
      bool IsOk = true;

      IsOk = IsOk && (filePath.ToLower().Contains(@"\lastupdate.") && filePath.ToLower().EndsWith(@".json"))
         || (filePath.ToLower().Contains(@"/lastupdate.") && filePath.ToLower().EndsWith(@".json"));

      return IsOk;
   }

   public Version GetVersion(string filePath)
   {
      string st = System.IO.File.ReadAllText(filePath);

      // Deserialize the JSON string to a ReleaseDetails object
      var rd = JsonSerializer.Deserialize<ReleaseDetails>(st);

      if (rd == null)
      {
         // LastError = "Invalid release details format.";
         return new Version();
      }
      else
      {
         return rd.ReleaseVersion.Version;
      }

      return new Version();
   }

   public string Update(string filePath, Version newVersion)
   {
      string st = System.IO.File.ReadAllText(filePath);

      // Deserialize the JSON string to a ReleaseDetails object
      var rd = JsonSerializer.Deserialize<ReleaseDetails>(st);

      if (rd == null)
      {
         rd = new ReleaseDetails
         {
         };

         // LastError = "Invalid release details format.";
         rd.ReleaseVersion.SetVersion(newVersion);
         rd.ReleaseVersion.SetBuildOn(DateTime.Now);
         rd.ReleaseNotes = "LastUpdate file generated by UpdateVersion ...";

         var option = new JsonSerializerOptions
         {
            WriteIndented = true,
         };

         st = JsonSerializer.Serialize(rd, option);

         File.WriteAllText(filePath, st);
      }
      else
      {
         rd.ReleaseVersion.SetVersion(newVersion);
         rd.ReleaseVersion.SetBuildOn(DateTime.Now);

         var option = new JsonSerializerOptions
         {
            WriteIndented = true,
         };

         st = JsonSerializer.Serialize(rd, option);

         File.WriteAllText(filePath, st);
      }

      return "ok";
   }
}

